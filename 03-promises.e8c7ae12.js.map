{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAuCAC,SAASC,eAAe,UAAUC,iBAAiB,UAAU,SAASC,GACpEA,EAAMC,iBAEN,MAAMC,EAASC,SAASN,SAASC,eAAe,UAAUM,OACtDC,EAAQC,WAAWT,SAASC,eAAe,SAASM,OACpDG,EAAOD,WAAWT,SAASC,eAAe,QAAQM,OAEtD,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIb,IAAK,IAAIO,EAAI,EAAGA,EAAIf,EAAQe,IAC1BT,EAAcS,EAAI,EAAGZ,EAAQY,EAAIV,GAC9BW,MAAK,EAACT,SAAEA,EAAQC,MAAEA,MACjBS,EAAAxB,GAASyB,OAAOC,QAAQ,qBAAqBZ,kBAAyBC,MAAU,IAEjFY,OAAM,EAACb,SAAEA,EAAQC,MAAEA,MAClBS,EAAAxB,GAASyB,OAAOG,QAAQ,oBAAoBd,kBAAyBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     Notiflix.Notify.success(`Fulfilled promise ${position}`, `Resolved in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.failure(`Rejected promise ${position}`, `Rejected in ${delay}ms`);\n//   });\n\n\n\n\n// це треш) але дуже цікаво !!!\n\ndocument.getElementById(\"myForm\").addEventListener(\"submit\", function(event) {\n  event.preventDefault(); \n  // console.log(\"Form submitted\");\n  const amount = parseInt(document.getElementById(\"amount\").value);\nconst delay = parseFloat(document.getElementById(\"delay\").value);\nconst step = parseFloat(document.getElementById(\"step\").value); \n\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n\n  for (let i = 0; i < amount; i++) {\n    createPromise(i + 1, delay + i * step)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position}, Resolved in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position}, Rejected in ${delay}ms`);\n      });\n  }\n});\n\n\n\n\n\n\n"],"names":["$7Y9D8","parcelRequire","document","getElementById","addEventListener","event","preventDefault","amount","parseInt","value","delay1","parseFloat","step","createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.e8c7ae12.js.map"}